version: '3.8'

services:
  # Main API Server
  groq-speech-api:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile
    container_name: groq-speech-api
    ports:
      - "8000:8000"
    environment:
      - GROQ_API_KEY=${GROQ_API_KEY}
      - GROQ_API_BASE_URL=${GROQ_API_BASE_URL:-https://api.groq.com/openai/v1}
      - DEFAULT_LANGUAGE=${DEFAULT_LANGUAGE:-en-US}
      - DEFAULT_SAMPLE_RATE=${DEFAULT_SAMPLE_RATE:-16000}
      - DEFAULT_CHANNELS=${DEFAULT_CHANNELS:-1}
      - DEFAULT_CHUNK_SIZE=${DEFAULT_CHUNK_SIZE:-1024}
      - DEFAULT_TIMEOUT=${DEFAULT_TIMEOUT:-30}
      - ENABLE_SEMANTIC_SEGMENTATION=${ENABLE_SEMANTIC_SEGMENTATION:-true}
      - ENABLE_LANGUAGE_IDENTIFICATION=${ENABLE_LANGUAGE_IDENTIFICATION:-true}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ../../logs:/app/logs
      - ../../temp:/app/temp
      - ../../uploads:/app/uploads
    networks:
      - groq-speech-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - redis

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: groq-speech-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - groq-speech-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx for load balancing and SSL termination
  nginx:
    image: nginx:alpine
    container_name: groq-speech-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - groq-speech-network
    restart: unless-stopped
    depends_on:
      - groq-speech-api
    healthcheck:
      test: [ "CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: groq-speech-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - groq-speech-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: groq-speech-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - groq-speech-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Development service (optional)
  groq-speech-dev:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile.dev
    container_name: groq-speech-dev
    ports:
      - "8001:8000"
    environment:
      - GROQ_API_KEY=${GROQ_API_KEY}
      - LOG_LEVEL=DEBUG
      - ENVIRONMENT=development
    volumes:
      - ../../:/app
      - ../../logs:/app/logs
    networks:
      - groq-speech-network
    restart: unless-stopped
    profiles:
      - dev

  # Testing service (optional)
  groq-speech-test:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile.test
    container_name: groq-speech-test
    environment:
      - GROQ_API_KEY=${GROQ_API_KEY}
      - LOG_LEVEL=DEBUG
      - ENVIRONMENT=testing
    volumes:
      - ../../:/app
      - ../../tests:/app/tests
    networks:
      - groq-speech-network
    profiles:
      - test
    command: [ "pytest", "-v", "--cov=groq_speech", "--cov=api" ]

networks:
  groq-speech-network:
    driver: bridge

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
