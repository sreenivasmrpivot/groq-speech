# Optimized Dockerfile for Groq Speech UI with HTTPS support
# Multi-stage build for minimal production image

# Stage 1: Build Next.js app
FROM node:18-slim as builder

# Install build dependencies for native modules
RUN apt-get update && apt-get install -y \
    python3 \
    make \
    g++ \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy Docker-specific package.json (uses Tailwind CSS v3)
COPY deployment/docker/package.docker.json ./package.json

# Install dependencies (including dev dependencies for build)
RUN npm install

# Copy source code
COPY examples/groq-speech-ui/ ./

# Copy Docker-specific config files (Tailwind CSS v3)
COPY deployment/docker/tailwind.config.js ./
COPY deployment/docker/postcss.config.js ./
COPY deployment/docker/globals.css ./src/app/globals.css

# Copy production HTTPS server script
COPY deployment/docker/https-prod-server.js ./https-prod-server.js

# Set environment variables for build
ENV NEXT_TELEMETRY_DISABLED=1
ENV NODE_ENV=production

# Build the application
RUN npm run build

# Stage 2: Production image with HTTPS support
FROM node:18-slim as production

# Set production environment
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# Install OpenSSL for certificate generation
RUN apt-get update && apt-get install -y \
    openssl \
    wget \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN groupadd -g 1001 nodejs && \
    useradd -r -u 1001 -g nodejs nextjs

# Set working directory
WORKDIR /app

# Copy built application
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY --from=builder --chown=nextjs:nodejs /app/public ./public

# Copy HTTPS production server script
COPY --from=builder --chown=nextjs:nodejs /app/https-prod-server.js ./https-prod-server.js

# Create certs directory
RUN mkdir -p /app/certs && chown nextjs:nodejs /app/certs

# Switch to non-root user
USER nextjs

# Expose HTTPS port
EXPOSE 3443

# Health check (HTTPS)
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider --no-check-certificate https://localhost:3443/ || exit 1

# Start the application with HTTPS
CMD ["node", "https-prod-server.js"]
